# Generated by Django 4.1.4 on 2023-01-28 13:37

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Автор',
                'verbose_name_plural': 'Авторы',
            },
        ),
        migrations.CreateModel(
            name='JustBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('authors', models.ManyToManyField(to='api.author')),
            ],
            options={
                'verbose_name': 'Сборник',
                'verbose_name_plural': 'Сборники',
            },
        ),
        migrations.CreateModel(
            name='Parallels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_class', models.PositiveSmallIntegerField(choices=[(7, 7), (8, 8), (9, 9), (10, 10), (11, 11)])),
                ('parallel_numbers', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Piece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.author')),
            ],
            options={
                'verbose_name': 'Произведение',
                'verbose_name_plural': 'Произведения',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('patronymic', models.CharField(max_length=100, verbose_name='Отчество')),
                ('class_number', models.PositiveSmallIntegerField(choices=[(7, 7), (8, 8), (9, 9), (10, 10), (11, 11)])),
                ('class_index', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('just_books', models.ManyToManyField(blank=True, default=None, to='api.justbook')),
            ],
            options={
                'verbose_name': 'Ученик',
                'verbose_name_plural': 'Ученики',
            },
        ),
        migrations.CreateModel(
            name='TextBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('class_number', models.IntegerField(choices=[(7, 7), (8, 8), (9, 9), (10, 10), (11, 11)], verbose_name='В каком классе выдаются')),
                ('release_year', models.DateField(blank=True, default=None)),
                ('authors', models.ManyToManyField(to='api.author')),
            ],
            options={
                'verbose_name': 'Учебник',
                'verbose_name_plural': 'Учебники',
            },
        ),
        migrations.DeleteModel(
            name='Book',
        ),
        migrations.AddField(
            model_name='student',
            name='text_books',
            field=models.ManyToManyField(blank=True, default=None, to='api.textbook'),
        ),
        migrations.AddField(
            model_name='justbook',
            name='pieces',
            field=models.ManyToManyField(to='api.piece'),
        ),
    ]
